name: Submodule Action Unit Tests
on: [push, pull_request]

# To test this action we rely on an external repo with commits that have all the scenarios. 
# That repo is: https://github.com/jtmullen/submodule-action-test-parent
# These tests do not cover all errors (i.e. some command went wrong)
# The tests do cover all failures (i.e. the submodule state doesn't meet the requirement)

jobs:
   run_tests:
    runs-on: ubuntu-latest
    name: Run All Tests
    steps:
    - name: Checkout Test Repo
      uses: actions/checkout@v2
      with:
        repository:  jtmullen/submodule-action-test-parent
    - name: Checkout Action
      uses: actions/checkout@v2
      with:
        path: "action"
    # Fail on Unsupported Event Payload
    - name: Fail on unsupported Event Payload
      uses: ./action/
      id: no-submodule
      continue-on-error: true
      with:
        path: "submodule-action-test-submodule"
        event_path: "action/test/bad_payload.json"
    - name: Verify Fail on unsupported Event Payload
      run: test "${{ steps.no-submodule.outputs.fails }}" = "error"   
    # If the Submodule is not checked out correctly we should fail
    - name: Fail Without Submodule
      uses: ./action/
      id: no-submodule
      continue-on-error: true
      with:
        path: "submodule-action-test-submodule"
        event_path: "action/test/new_submodule_event_push.json"
    - name: Verify Fail Without Submodule
      run: test "${{ steps.no-submodule.outputs.fails }}" = "error"     
    - name: Checkout Test Repo Submodule
      uses: actions/checkout@v2
      with:
        repository:  jtmullen/submodule-action-test-submodule
        path: "submodule-action-test-submodule"
        fetch-depth: 0
    # New Submodules should pass without a progression check
    - name: Pass with New Submodule
      uses: ./action/
      id: new-submodule
      with:
        path: "submodule-action-test-submodule"
        event_path: "action/test/new_submodule_event_push.json"
        branch: "main"
    - name: Verify Pass with New Submodule
      run: test -z "${{ steps.new-submodule.outputs.fails }}"
    # New submodule can fail if on wrong branch
    - name: Fail New Submodule Wrong Branch
      uses: ./action/
      id: new-submodule-wrong-branch
      continue-on-error: true
      with:
        path: "submodule-action-test-submodule"
        event_path: "action/test/new_submodule_event_push.json"
        branch: "fake_branch"
    - name: Verify Fail New Submodule Wrong Branch
      run: test "${{ steps.no-submodule.outputs.fails }}" = "Submodule submodule-action-test-submodule Hash 803027ba35806133a1a0ecdf8fe89b7e90d1692d is not on branch fake_branch"
    # Fail if submodule moves backwards      
    - name: Fail When Submodule Moves Backwards
      uses: ./action/
      id: move-backwards
      continue-on-error: true
      with:
        path: "submodule-action-test-submodule"
        event_path: "action/test/submodule_moved_backwards.json"
    - name: Verify Fail When Submodule Moves Backwards
      run: test "${{ steps.no-submodule.outputs.fails }}" = "Submodule submodule-action-test-submodule on 66fe441ec6c2db7565686f303dde85d7eb8ad132 is not an ancestor of that on 1063abeafa3795cfb9f80b0b2241f961d5c8e948"
    